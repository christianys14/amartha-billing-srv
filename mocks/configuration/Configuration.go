// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Configuration is an autogenerated mock type for the Configuration type
type Configuration struct {
	mock.Mock
}

// GetArray provides a mock function with given fields: key
func (_m *Configuration) GetArray(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetBinary provides a mock function with given fields: key
func (_m *Configuration) GetBinary(key string) []byte {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBinary")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: key
func (_m *Configuration) GetBool(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetFloat provides a mock function with given fields: key
func (_m *Configuration) GetFloat(key string) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetInt provides a mock function with given fields: key
func (_m *Configuration) GetInt(key string) int64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetMap provides a mock function with given fields: key
func (_m *Configuration) GetMap(key string) map[string]string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetString provides a mock function with given fields: key
func (_m *Configuration) GetString(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewConfiguration creates a new instance of Configuration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *Configuration {
	mock := &Configuration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
